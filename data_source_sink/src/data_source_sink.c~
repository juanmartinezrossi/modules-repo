/* 
 * Copyright (c) 2012, Ismael Gomez-Miguelez <ismael.gomez@tsc.upc.edu>.
 * This file is part of ALOE++ (http://flexnets.upc.edu/)
 * 
 * ALOE++ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ALOE++ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with ALOE++.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <complex.h>
#include <fftw3.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include <phal_sw_api.h>
#include "skeleton.h"
#include "params.h"

#include "data_source_sink_interfaces.h"
#include "data_source_sink_functions.h"
#include "data_source_sink.h"

//ALOE Module Defined Parameters. Do not delete.
char mname[STR_LEN]="data_source_sink";
int run_times=1;
int block_length=36;
char plot_modeIN[STR_LEN]="DEFAULT";
char plot_modeOUT[STR_LEN]="DEFAULT";
float samplingfreqHz=1.0;

float gain=1.0;
float reffreq=1.0;
float tonefreq=1024.0;


//Module User Defined Parameters
char myfilename[1024]= "data/rfc793.txt"; //"../../../modules/data_source_sink/data/rfc793.txt";
int ctrl_flow = 0; 					// 0: No control data flow, 1: With control of data flow

//Global Variables
_Complex float bufferA[2048];
float bufferB[2048];
long int myfilelength=0;
#define FILEMAXLENGTH  			50000000
char filebuffer[FILEMAXLENGTH];
unsigned int snd_flag=1;	
int debug=0; //0: NO DEBUG, 1: DEBUG

// Identity

int IDnumber=12345678;
char IDfilename[1024]=".NOFILE";
char IDbuffer[256];;
long int IDlength=0;
/*
 * Function documentation
 *
 * @returns 0 on success, -1 on error
 */
int initialize() {

	int i;

	printf("INITIALIZEoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooP\n");
	/* Get control parameters*/
	param_get_int("block_length", &block_length);		//Initialized by hand or config file
	param_get_int("ctrl_flow", &ctrl_flow);
	param_get_int("snd_flag", &snd_flag);
	param_get_int("debug", &debug);
	param_get_int("DNI", &IDnumber);

/*	param_get_int("run_times", &run_times);			//Initialized by hand or config file
	param_get_string("plot_modeIN", &plot_modeIN[0]);	//Initialized by hand or config file
	param_get_string("plot_modeOUT", &plot_modeOUT[0]);
	param_get_float("samplingfreqHz", &samplingfreqHz);
*/

	/* Verify control parameters */
	if (block_length > get_input_max_samples()) {
		/*Include the file name and line number when printing*/
		moderror_msg("ERROR: Block length=%d > INPUT_MAX_DATA=%d\n", block_length, INPUT_MAX_DATA);
		moderror("Check your data_source_sink_interfaces.h file\n");
		return -1;
	}
	if(ctrl_flow == 1)snd_flag=0;
	else snd_flag=block_length;


	/*Include the file name and line number when printing*/
	modinfo_msg("Parameter block_length is %d\n",block_length);	//Print message and parameter 
	modinfo("Parameter block_length \n");				//Print only message

	/* Print Module Init Parameters */
	printf("O--------------------------------------------------------------------------------------------O\n");
	printf("O    SPECIFIC PARAMETERS SETUP: %s.initialize().\n", mname);
	printf("O      Nof Inputs=%d, DataTypeIN=%s, Nof Outputs=%d, DataTypeOUT=%s\n", 
		       NOF_INPUT_ITF, IN_TYPE, NOF_OUTPUT_ITF, OUT_TYPE);
	printf("O      block_length=%d, ctrl_flow=%d, snd_flag=%d\n", block_length, ctrl_flow, snd_flag);
	printf("O      DNI=%d\n", IDnumber);
	printf("O--------------------------------------------------------------------------------------------O\n");


	myfilelength=read_file(myfilename, filebuffer, FILEMAXLENGTH);
	addIDbin(&IDnumber);


	printf("\033[1;32mO--------------------------------------------------------------------------------------------O\n");
	printf("\033[1;32mO--------------------------------------------------------------------------------------------O\n");
	printf("\033[1;31mO--------------------------------------------------------------------------------------------O\n");
	printf("O------------------------PLEASE CHECK YOUR ID NUMBER!!!--------------------------------------O\n");
	printf("O------------------------PLEASE CHECK YOUR ID NUMBER!!!--------------------------------------O\n");
	printf("O------------------------PLEASE CHECK YOUR ID NUMBER!!!--------------------------------------O\033[0m\n");
	printf("\033[1;35mO      DNI=%d\033[0m\n", IDnumber);
	printf("\033[1;31mO---- IF WRONG, PLEASE CORRECT AT paramscfg/IDENTIFY.params ---------------------------------O\033[0m\n");
	printf("\033[1;31mO--------------------------------------------------------------------------------------------O\033[0m\n");






	return 0;
}



/**
 * @brief Function documentation
 *
 * @param inp Input interface buffers. Data from other interfaces is stacked in the buffer.
 * Use in(ptr,idx) to access the address. To obtain the number of received samples use the function
 * int get_input_samples(int idx) where idx is the interface index.
 *
 * @param out Input interface buffers. Data to other interfaces must be stacked in the buffer.
 * Use out(ptr,idx) to access the address.
 *
 * @return On success, returns a non-negative number indicating the output
 * samples that should be transmitted through all output interface. To specify a different length
 * for certain interface, use the function set_output_samples(int idx, int len)
 * On error returns -1.
 *
 * @code
 * 	input_t *first_interface = inp;
	input_t *second_interface = in(inp,1);
	output_t *first_output_interface = out;
	output_t *second_output_interface = out(out,1);
 *
 */

int work(input_t *inp, output_t *out) {
	static int Tslot=0;
	int rcv_samples = get_input_samples(0); /** number of samples at itf 0 buffer */
	int rcv_samples1=get_input_samples(1); /** number of samples at itf 0 buffer */
	int snd_samples=block_length;

	unsigned int *ctrl = in(inp,1);
	static long int counter=0;
	float BER;

	if(debug==1)printf("Tslot=%d || %s: snd_samples=%d\n", Tslot, mname, rcv_samples);

	// Send block_length data to output
	//Check control interface
	if(ctrl_flow == 1){
		snd_samples=0;
		if(rcv_samples1 > 0){
			snd_flag=((unsigned int)(*ctrl))&0xFFFF;
			snd_samples=snd_flag;
		}
		printf("Tslot=%d || DATA_SOURCE_SINK:rcv_samplesDATA=%d, rcv_samplesCTRL=%d, CTRL=%d\n", Tslot, rcv_samples, rcv_samples1, snd_flag);
		//if(snd_flag==0)printf("DATA_SOURCE_SINK: Tslot=%d, snd_flag=%d...........NOT TO SEND DATA\n", Tslot, snd_flag);
		//if(snd_flag>0)printf("DATA_SOURCE_SINK: Tslot=%d, snd_flag=%d...........SEND DATA\n", Tslot, snd_flag);
	}
		


	memcpy(out, (char *)(filebuffer+counter), snd_samples);
	counter += snd_samples;
	// Compare received data 
	if(rcv_samples>0){
		if(compare_data(filebuffer, myfilelength, inp, rcv_samples, &BER)==-1)return(-1);	
	}
	if(debug==1)printf("Tslot=%d || %s: snd_samples=%d\n", Tslot, mname, snd_samples);
	Tslot++;
	return snd_samples;
}

/** @brief Deallocates resources created during initialize().
 * @return 0 on success -1 on error
 */
int stop() {
	return 0;
}


